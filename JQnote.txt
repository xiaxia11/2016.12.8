#JQuery
> * js方法库，集成了许多解决问题的方法{
    提供强大的选择器、简洁的API、优雅的链式、便捷的操作
}
> * 优点：快速、高效开发（处理了很多兼容性问题）
        
> * 核心：写得少，干得多
> * 版本： 
    * 1开头（兼容低版本浏览器）
    * 2开头(去掉了兼容问题)
    * 3开头（在2开头的基础上又加些新方法（有移动端的），也不兼容低版本浏览器）
    min.js 压缩版本  可以直接用来开发
    版本号的.js 学习版
    http://www.jquery123.com/
    script  src="jq.js"
	 	$('#div1')
```
> * $ 就是jQuery一个函数名
> * $ ('')  获取元素、创建元素...
$(function(){})  readay事件
$(obj)  可以把原生对象转为JQ对象
css : 对某个元素的样式可读可写
一个参数： 如果是字符串-->获取，直接写要获取的属性名即可
           如果是对象{}---> 批量设置
两个参数： 设置：obj.css(key,val)
```
####属性选择器
```
class  . 
		
eq() 下标

加了下标[]之后JQ对象会变成原生对象，如果要用JQ的方法，要用$()包一下

所有JQ的方法基本在JQ对象下才能使用（除工具方法以外都是JQ对象）

$('*')  获取所有元素

[name|="value"] :  获取有name属性=value值的时候或者以value-开头的元素

[name="vlaue"]:获取有name属性=value值元素

[name*="value"]:获取有name属性=所有包含value值元素

[name!="value"]:获取有name属性不包含value值元素

[name~="value"]:获取有name属性=value值元素||获取有name属性空格value值元素

[name$="value"]:获取以value结尾
 
[name^="value"]：获取以value开头
```
####伪类选择器
> * 伪类的：
* 元素:
	找到input中为submit  -> $('input:submit')
	$('input:checked') 找到input为选中的
	奇数 ->  :odd     从0开始算的
	偶数 ->  :even    从0开始算的
	li:gt(index) ->  找到大于索引的元素
	li:lt(index) ->  找到小于索引的元素
	找到的是大于或者小于，但是排除等于

----	
> * JQ事件
	1.不带on+事件名+() 
	2.on('click',function(){})
	分清是JQ对象还是原生对象
	知道JQ对象上的方法有什么效果
	逻辑
	
-----
> * 属性操作
attr:属性
	一个参数：
		获取
	两个参数：
		设置
val:value
	$.val()  获取
	$.val('写东西') 设置
checked为内存中的属性，直接在页面设置checked为false的时候是没用的
那么，就不能用attr，prop()
prop():专门用来读、写checked

---
> * 获取内容
text() -> 专门操作文字，就算写上标签也会转成字符串放到元素中
html() -> innerHTML 
val() ->  只能操作表单元素
如果直接调用，读
传入字符串进去为写
Sizzle:选择器 

链式调用核心：在当前方法下返回this

###节点
```
    frist(){
        一堆里边的第一个
    }
    last(){
        一堆里边的最后一个
    }
    slice(){
       从哪开始到哪结束，但不包含结束这位
    }
    children(筛选)
        如果有指定的子元素要获取，那么括号中可以筛选
    find():
        类似tarName
        找到某个元素下的指定的子|孙元素
     $('ul li a')
		建议：
		var $ul = $('#ul');
		//先ul缓存起来，然后通过find去查找，节省性能。
			$ul.find('[]').css()...
    prev() 上一个
    next()  下一个
```
###查找节点 
```
$(子级).parent()
    找到某个子级的父节点
$(子级).parents(筛选)
    批量查找子级的祖先级节点
    筛选：指定的祖先级节点
closest
    精确的查找能力，实战开发之王，找的是最近的唯一一个元素（包括自身）
    只从自身开始查找，找离得最近的父级，如果有自身就找自身。
``` 

###添加节点
```
$('<li></li>') 创建元素
添加到父级末尾： $父级.append(子级)；
如果需要链式操作，那么this是父级
$子级.appendTo(父级)
如果需要链式操作，那么this就是子级

添加到父级末尾：
	$父级.append(子级);
	如果需要链式操作，那么this是父级;

	$子级.appendTo(父级)
	如果需要链式操作，那么this是子级

//JQ前后添加节点	
$('#ul').before($li)
$(添加到谁的前面).before(添加谁)

$li.insertBefore($('#ul'))
(添加谁).insertBefore$(添加到谁的前面)


$('#ul').after($li);
$(添加到谁的后面).after(添加谁);

$li.insertAfter($('#ul'));

prependTo()   prepend() 

子级.prependTo(父级)
父级.prepend(子级)

$('li').first().remove(); 
		
clone(true)
	原生的只能克隆内容，不能克隆事件
	JQ中的clone(true)就可以克隆事件，不加true连内容也能克隆。
要删除谁.remove();
```